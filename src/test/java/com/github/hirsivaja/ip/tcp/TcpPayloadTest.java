package com.github.hirsivaja.ip.tcp;

import com.github.hirsivaja.ip.IpUtils;
import com.github.hirsivaja.ip.TestUtils;
import com.github.hirsivaja.ip.ipv4.Ipv4Header;
import org.junit.Assert;
import org.junit.Test;

import java.nio.ByteBuffer;
import java.util.Arrays;

public class TcpPayloadTest {

    @Test
    public void tcpTest() {
        byte[] ipv4HeaderBytes = IpUtils.parseHexBinary("4500031F1D2540008006C8C5C0A8C887C0A8C815");
        Ipv4Header ipv4Header = Ipv4Header.decode(ByteBuffer.wrap(ipv4HeaderBytes));
        byte[] tcpBytes = IpUtils.parseHexBinary
        TcpMessagePayload payload = (TcpMessagePayload) TcpMessagePayload.decode(ByteBuffer.wrap(tcpBytes), ipv4Header);

        TcpHeader tcpHeader = payload.getTcpHeader();
        Assert.assertEquals(7876, tcpHeader.getSrcPort());
        Assert.assertEquals(2000, tcpHeader.getDstPort());
        Assert.assertEquals(0x6AF09F2E, tcpHeader.getSequenceNumber());
        Assert.assertEquals(0x6F9B26E0, tcpHeader.getAckNumber());
        Assert.assertEquals(0x18, tcpHeader.getFlags().toByte());
        Assert.assertEquals(0x0402, tcpHeader.getWindowSize());
        Assert.assertEquals((short) 0x7C66, tcpHeader.getChecksum());
        Assert.assertEquals(0x0000, tcpHeader.getUrgentPointer());
        Assert.assertEquals(759, payload.getPayload().length);

        byte[] outBytes = TestUtils.toBytes(payload);
        Assert.assertArrayEquals(tcpBytes, Arrays.copyOfRange(outBytes, 20, outBytes.length));
    }

    @Test
    public void instantiationTest() {
        byte[] ipv4HeaderBytes = IpUtils.parseHexBinary("4500031F1D2540008006C8C5C0A8C887C0A8C815");
        Ipv4Header ipv4Header = Ipv4Header.decode(ByteBuffer.wrap(ipv4HeaderBytes));
        byte[] tcpData = IpUtils.parseHexBinary
        TcpHeader tcpHeaderIn = new TcpHeader((short) 7876, (short) 2000, 0x6AF09F2E, 0x6F9B26E0, TcpFlags.decode((byte) 0x18), (short) 0x0402, (short) 0x0000, new byte[0]);
        TcpMessagePayload payload = new TcpMessagePayload(ipv4Header, tcpHeaderIn, tcpData);
        TcpHeader tcpHeader = payload.getTcpHeader();

        Assert.assertEquals(7876, tcpHeader.getSrcPort());
        Assert.assertEquals(2000, tcpHeader.getDstPort());
        Assert.assertEquals(0x6AF09F2E, tcpHeader.getSequenceNumber());
        Assert.assertEquals(0x6F9B26E0, tcpHeader.getAckNumber());
        Assert.assertEquals(0x18, tcpHeader.getFlags().toByte());
        Assert.assertEquals(0x0402, tcpHeader.getWindowSize());
        Assert.assertEquals((short) 0x7C66, tcpHeader.getChecksum());
        Assert.assertEquals(0x0000, tcpHeader.getUrgentPointer());
        Assert.assertEquals(759, payload.getPayload().length);
    }
}
