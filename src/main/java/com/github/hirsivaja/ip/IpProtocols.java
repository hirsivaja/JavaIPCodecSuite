package com.github.hirsivaja.ip;

public enum IpProtocols implements IpProtocol {
    HOP_BY_HOP((byte) 0x00),
    ICMP((byte) 0x01),
    IGMP((byte) 0x02),
    GGP((byte) 0x03),
    IPV4_ENCAPSULATION((byte) 0x04),
    ST((byte) 0x05),
    TCP((byte) 0x06),
    CBT((byte) 0x07),
    EGP((byte) 0x08),
    IGP((byte) 0x09),
    BBN_RCC_MON((byte) 0x0A),
    NVP_II((byte) 0x0B),
    PUP((byte) 0x0C),
    ARGUS((byte) 0x0D),
    EMCON((byte) 0x0E),
    XNET((byte) 0x0F),
    CHAOS((byte) 0x10),
    UDP((byte) 0x11),
    MUX((byte) 0x12),
    DCN_MEAS((byte) 0x13),
    HMP((byte) 0x14),
    PRM((byte) 0x15),
    XNS_IDP((byte) 0x16),
    TRUNK1((byte) 0x17),
    TRUNK2((byte) 0x18),
    LEAF1((byte) 0x19),
    LEAF2((byte) 0x1A),
    RDP((byte) 0x1B),
    IRTP((byte) 0x1C),
    ISO_TP4((byte) 0x1D),
    NETBLT((byte) 0x1E),
    MFE_NSP((byte) 0x1F),
    MERIT_INP((byte) 0x20),
    DCCP((byte) 0x21),
    TPC((byte) 0x22),
    IDPR((byte) 0x23),
    XTP((byte) 0x24),
    DDP((byte) 0x25),
    IDPR_CMTP((byte) 0x26),
    TP_PLUS_PLUS((byte) 0x27),
    IL((byte) 0x28),
    IPV6_ENCAPSULATION((byte) 0x29),
    SDRP((byte) 0x2A),
    IPV6_ROUTING((byte) 0x2B),
    IPV6_FRAGMENTATION((byte) 0x2C),
    IDRP((byte) 0x2D),
    RSVP((byte) 0x2E),
    GRE((byte) 0x2F),
    DSR((byte) 0x30),
    BNA((byte) 0x31),
    ESP((byte) 0x32),
    AUTHENTICATION((byte) 0x33),
    INLSP((byte) 0x34),
    SWIPE((byte) 0x35),
    NARP((byte) 0x36),
    MIN_ENCAPSULATION((byte) 0x37),
    TLSP((byte) 0x38),
    SKIP((byte) 0x39),
    ICMPV6((byte) 0x3A),
    IPV6_NO_NEXT((byte) 0x3B),
    IPV6_DESTINATION((byte) 0x3C),
    ANY_HOST_INTERNAL_PROTOCOL((byte) 0x3D),
    CFTP((byte) 0x3E),
    ANY_LOCAL_NETWORK((byte) 0x3F),
    SAT_EXPAK((byte) 0x40),
    KRYPTOLAN((byte) 0x41),
    RVD((byte) 0x42),
    IPPC((byte) 0x43),
    ANY_DISTRIBUTED_FILE_SYSTEM((byte) 0x44),
    SAT_MON((byte) 0x45),
    VISA((byte) 0x46),
    IPCU((byte) 0x47),
    CPNX((byte) 0x48),
    CPHB((byte) 0x49),
    WSN((byte) 0x4A),
    PVP((byte) 0x4B),
    BR_SAT_MON((byte) 0x4C),
    SUN_ND((byte) 0x4D),
    WB_MON((byte) 0x4E),
    WB_EXPAK((byte) 0x4F),
    ISO_IP((byte) 0x50),
    VMTP((byte) 0x51),
    SECURE_VMTP((byte) 0x52),
    VINES((byte) 0x53),
    IPTM((byte) 0x54),
    NSFNET_IGP((byte) 0x55),
    DGP((byte) 0x56),
    TCF((byte) 0x57),
    EIGRP((byte) 0x58),
    OSPFIGP((byte) 0x59),
    SPRITE_RPC((byte) 0x5A),
    LARP((byte) 0x5B),
    MTP((byte) 0x5C),
    AX25((byte) 0x5D),
    IPIP((byte) 0x5E),
    MICP((byte) 0x5F),
    SCC_SP((byte) 0x60),
    ETHERIP((byte) 0x61),
    ENCAP((byte) 0x62),
    ANY_PRIVATE_ENCRYPTION_SCHEME((byte) 0x63),
    GMTP((byte) 0x64),
    IFMP((byte) 0x65),
    PNNI((byte) 0x66),
    PIM((byte) 0x67),
    ARIS((byte) 0x68),
    SCPS((byte) 0x69),
    QNX((byte) 0x6A),
    AN((byte) 0x6B),
    IPCOMP((byte) 0x6C),
    SNP((byte) 0x6D),
    COMPAQ_PEER((byte) 0x6E),
    IPX_IN_IP((byte) 0x6F),
    VRRP((byte) 0x70),
    PGM((byte) 0x71),
    ANY_0_HOP_PROTOCOL((byte) 0x72),
    L2TP((byte) 0x73),
    DDX((byte) 0x74),
    IATP((byte) 0x75),
    STP((byte) 0x76),
    SRP((byte) 0x77),
    UTI((byte) 0x78),
    SMP((byte) 0x79),
    SM((byte) 0x7A),
    PTP((byte) 0x7B),
    IS_IS_OVER_IPv4((byte) 0x7C),
    FIRE((byte) 0x7D),
    CRTP((byte) 0x7E),
    CRUDP((byte) 0x7F),
    SSCOPMCE((byte) 0x80),
    IPLT((byte) 0x81),
    SPS((byte) 0x82),
    PIPE((byte) 0x83),
    SCTP((byte) 0x84),
    FC((byte) 0x85),
    RSVP_E2E_IGNORE((byte) 0x86),
    MOBILITY_HEADER((byte) 0x87),
    UDP_LITE((byte) 0x88),
    MPLS_IN_IP((byte) 0x89),
    MANET((byte) 0x8A),
    HIP((byte) 0x8B),
    SHIM6((byte) 0x8C),
    WESP((byte) 0x8D),
    ROHC((byte) 0x8E),
    ETHERNET((byte) 0x8F),
    AGGFRAG((byte) 0x90),
    NSH((byte) 0x91),
    HOMA((byte) 0x92),
    BIT_EMU((byte) 0x93),
    EXPERIMENTAL_1((byte) 0xFD),
    EXPERIMENTAL_2((byte) 0xFE);

    private final byte typeValue;

    IpProtocols(byte type) {
        this.typeValue = type;
    }

    @Override
    public byte type() {
        return typeValue;
    }
}
