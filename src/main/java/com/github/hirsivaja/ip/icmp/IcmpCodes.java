package com.github.hirsivaja.ip.icmp;

public enum IcmpCodes implements IcmpCode {
    ECHO_REPLY(IcmpTypes.ECHO_REPLY, (byte) 0x00),
    DESTINATION_NETWORK_UNREACHABLE(IcmpTypes.DESTINATION_UNREACHABLE, (byte) 0x00),
    DESTINATION_HOST_UNREACHABLE(IcmpTypes.DESTINATION_UNREACHABLE, (byte) 0x01),
    DESTINATION_PROTOCOL_UNREACHABLE(IcmpTypes.DESTINATION_UNREACHABLE, (byte) 0x02),
    DESTINATION_PORT_UNREACHABLE(IcmpTypes.DESTINATION_UNREACHABLE, (byte) 0x03),
    FRAGMENTATION_REQUIRED_AND_DONT_FRAGMENT_FLAG_SET(IcmpTypes.DESTINATION_UNREACHABLE, (byte) 0x04),
    SOURCE_ROUTE_FAILED(IcmpTypes.DESTINATION_UNREACHABLE, (byte) 0x05),
    DESTINATION_NETWORK_UNKNOWN(IcmpTypes.DESTINATION_UNREACHABLE, (byte) 0x06),
    DESTINATION_HOST_UNKNOWN(IcmpTypes.DESTINATION_UNREACHABLE, (byte) 0x07),
    SOURCE_HOST_ISOLATED(IcmpTypes.DESTINATION_UNREACHABLE, (byte) 0x08),
    NETWORK_ADMINISTRATIVELY_PROHIBITED(IcmpTypes.DESTINATION_UNREACHABLE, (byte) 0x09),
    HOST_ADMINISTRATIVELY_PROHIBITED(IcmpTypes.DESTINATION_UNREACHABLE, (byte) 0x0A),
    NETWORK_UNREACHABLE_FOR_TOS(IcmpTypes.DESTINATION_UNREACHABLE, (byte) 0x0B),
    HOST_UNREACHABLE_FOR_TOS(IcmpTypes.DESTINATION_UNREACHABLE, (byte) 0x0C),
    COMMUNICATION_ADMINISTRATIVELY_PROHIBITED(IcmpTypes.DESTINATION_UNREACHABLE, (byte) 0x0D),
    HOST_PRECEDENCE_VIOLATION(IcmpTypes.DESTINATION_UNREACHABLE, (byte) 0x0E),
    PRECEDENCE_CUTOFF_IN_EFFECT(IcmpTypes.DESTINATION_UNREACHABLE, (byte) 0x0F),
    SOURCE_QUENCH(IcmpTypes.SOURCE_QUENCH, (byte) 0x00),
    REDIRECT_DATAGRAM_FOR_THE_NETWORK(IcmpTypes.REDIRECT_MESSAGE, (byte) 0x00),
    REDIRECT_DATAGRAM_FOR_THE_HOST(IcmpTypes.REDIRECT_MESSAGE, (byte) 0x01),
    REDIRECT_DATAGRAM_FOR_THE_TOS_AND_NETWORK(IcmpTypes.REDIRECT_MESSAGE, (byte) 0x02),
    REDIRECT_DATAGRAM_FOR_THE_TOS_AND_HOST(IcmpTypes.REDIRECT_MESSAGE, (byte) 0x03),
    ALTERNATE_HOST_ADDRESS(IcmpTypes.ALTERNATE_HOST_ADDRESS, (byte) 0x00),
    ECHO_REQUEST(IcmpTypes.ECHO_REQUEST, (byte) 0x00),
    ROUTER_ADVERTISEMENT(IcmpTypes.ROUTER_ADVERTISEMENT, (byte) 0x00),
    ROUTER_SOLICITATION(IcmpTypes.ROUTER_SOLICITATION, (byte) 0x00),
    TTL_EXPIRED_IN_TRANSIT(IcmpTypes.TIME_EXCEEDED, (byte) 0x00),
    FRAGMENT_REASSEMBLY_TIME_EXCEEDED(IcmpTypes.TIME_EXCEEDED, (byte) 0x01),
    POINTER_INDICATES_THE_ERROR(IcmpTypes.PARAMETER_PROBLEM, (byte) 0x00),
    MISSING_A_REQUIRED_OPTION(IcmpTypes.PARAMETER_PROBLEM, (byte) 0x01),
    BAD_LENGTH(IcmpTypes.PARAMETER_PROBLEM, (byte) 0x02),
    TIMESTAMP(IcmpTypes.TIMESTAMP, (byte) 0x00),
    TIMESTAMP_REPLY(IcmpTypes.TIMESTAMP_REPLY, (byte) 0x00),
    INFORMATION_REQUEST(IcmpTypes.INFORMATION_REQUEST, (byte) 0x00),
    INFORMATION_REPLY(IcmpTypes.INFORMATION_REPLY, (byte) 0x00),
    ADDRESS_MASK_REQUEST(IcmpTypes.ADDRESS_MASK_REQUEST, (byte) 0x00),
    ADDRESS_MASK_REPLY(IcmpTypes.ADDRESS_MASK_REPLY, (byte) 0x00),
    TRACEROUTE(IcmpTypes.TRACEROUTE, (byte) 0x00),
    DATAGRAM_CONVERSION_ERROR(IcmpTypes.DATAGRAM_CONVERSION_ERROR, (byte) 0x00),
    MOBILE_HOST_REDIRECT(IcmpTypes.MOBILE_HOST_REDIRECT, (byte) 0x00),
    WHERE_ARE_YOU(IcmpTypes.WHERE_ARE_YOU, (byte) 0x00),
    HERE_I_AM(IcmpTypes.HERE_I_AM, (byte) 0x00),
    MOBILE_REGISTRATION_REQUEST(IcmpTypes.MOBILE_REGISTRATION_REQUEST, (byte) 0x00),
    MOBILE_REGISTRATION_REPLY(IcmpTypes.MOBILE_REGISTRATION_REPLY, (byte) 0x00),
    DOMAIN_NAME_REQUEST(IcmpTypes.DOMAIN_NAME_REQUEST, (byte) 0x00),
    DOMAIN_NAME_REPLY(IcmpTypes.DOMAIN_NAME_REPLY, (byte) 0x00),
    SKIP_ALGORITHM_DISCOVERY_PROTOCOL(IcmpTypes.SKIP_ALGORITHM_DISCOVERY_PROTOCOL, (byte) 0x00),
    PHOTURIS(IcmpTypes.PHOTURIS, (byte) 0x00),
    EXPERIMENTAL_MOBILE_PROTOCOLS(IcmpTypes.EXPERIMENTAL_MOBILE_PROTOCOLS, (byte) 0x00),
    EXTENDED_ECHO_REQUEST(IcmpTypes.EXTENDED_ECHO_REQUEST, (byte) 0x00),
    NO_ERROR(IcmpTypes.EXTENDED_ECHO_REPLY, (byte) 0x00),
    MALFORMED_QUERY(IcmpTypes.EXTENDED_ECHO_REPLY, (byte) 0x01),
    NO_SUCH_INTERFACE(IcmpTypes.EXTENDED_ECHO_REPLY, (byte) 0x02),
    NO_SUCH_TABLE_ENTRY(IcmpTypes.EXTENDED_ECHO_REPLY, (byte) 0x03),
    MULTIPLE_INTERFACES_SATISFY_QUERY(IcmpTypes.EXTENDED_ECHO_REPLY, (byte) 0x04);

    private final IcmpType type;
    private final byte code;

    IcmpCodes(IcmpType type, byte code) {
        this.type = type;
        this.code = code;
    }

    @Override
    public IcmpType type() {
        return type;
    }

    @Override
    public byte code() {
        return code;
    }
}
